class NotificationService {
  constructor(slackApp, database) {
    this.slackApp = slackApp;
    this.database = database;
  }

  async sendMergeRequestNotification(user, mergeRequest, project, action, reason, author) {
    try {
      const actionText = this.getActionText(action);
      const reasonText = reason === 'assignee' ? '–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º' : '–Ω–∞–∑–Ω–∞—á–µ–Ω reviewer-–æ–º';
      
      const blocks = [
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `üîÄ *${actionText} Merge Request*\n\n*${mergeRequest.title}*`
          }
        },
        {
          type: 'section',
          fields: [
            {
              type: 'mrkdwn',
              text: `*–ü—Ä–æ–µ–∫—Ç:*\n${project.name}`
            },
            {
              type: 'mrkdwn',
              text: `*–ê–≤—Ç–æ—Ä:*\n${author.name}`
            },
            {
              type: 'mrkdwn',
              text: `*–í–∞—à–∞ —Ä–æ–ª—å:*\n${reasonText}`
            },
            {
              type: 'mrkdwn',
              text: `*–°—Ç–∞—Ç—É—Å:*\n${mergeRequest.state}`
            }
          ]
        }
      ];

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (mergeRequest.description && mergeRequest.description.trim()) {
        const description = mergeRequest.description.length > 300 
          ? mergeRequest.description.substring(0, 300) + '...'
          : mergeRequest.description;
        
        blocks.push({
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `*–û–ø–∏—Å–∞–Ω–∏–µ:*\n${description}`
          }
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      blocks.push({
        type: 'actions',
        elements: [
          {
            type: 'button',
            text: {
              type: 'plain_text',
              text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å MR'
            },
            url: mergeRequest.url,
            style: 'primary'
          },
          {
            type: 'button',
            text: {
              type: 'plain_text',
              text: 'üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç'
            },
            url: project.web_url
          }
        ]
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      blocks.push({
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: `üè∑Ô∏è MR !${mergeRequest.iid} ‚Ä¢ ${this.formatBranches(mergeRequest.source_branch, mergeRequest.target_branch)}`
          }
        ]
      });

      await this.slackApp.client.chat.postMessage({
        token: process.env.SLACK_BOT_TOKEN,
        channel: `@${user.slack_user_id}`,
        text: `${actionText} Merge Request: ${mergeRequest.title}`,
        blocks: blocks
      });

      console.log(`‚úÖ MR —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.slack_user_id}`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ MR —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  async sendMentionNotification(user, mergeRequest, project, note, author) {
    try {
      const noteText = note.note.length > 500 
        ? note.note.substring(0, 500) + '...'
        : note.note;

      const blocks = [
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `üí¨ *–í–∞—Å —É–ø–æ–º—è–Ω—É–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏*\n\n*MR: ${mergeRequest.title}*`
          }
        },
        {
          type: 'section',
          fields: [
            {
              type: 'mrkdwn',
              text: `*–ü—Ä–æ–µ–∫—Ç:*\n${project.name}`
            },
            {
              type: 'mrkdwn',
              text: `*–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:*\n${author.name}`
            }
          ]
        },
        {
          type: 'section',
          text: {
            type: 'mrkdwn',
            text: `*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n${this.formatMentionText(noteText)}`
          }
        },
        {
          type: 'actions',
          elements: [
            {
              type: 'button',
              text: {
                type: 'plain_text',
                text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å'
              },
              url: note.url || mergeRequest.url,
              style: 'primary'
            },
            {
              type: 'button',
              text: {
                type: 'plain_text',
                text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å MR'
              },
              url: mergeRequest.url
            }
          ]
        },
        {
          type: 'context',
          elements: [
            {
              type: 'mrkdwn',
              text: `üè∑Ô∏è MR !${mergeRequest.iid} ‚Ä¢ ${project.name}`
            }
          ]
        }
      ];

      await this.slackApp.client.chat.postMessage({
        token: process.env.SLACK_BOT_TOKEN,
        channel: `@${user.slack_user_id}`,
        text: `–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ MR: ${mergeRequest.title}`,
        blocks: blocks
      });

      console.log(`‚úÖ Mention —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.slack_user_id}`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ mention —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  getActionText(action) {
    const actionMap = {
      'open': 'üìñ –û—Ç–∫—Ä—ã—Ç',
      'close': 'üîí –ó–∞–∫—Ä—ã—Ç',
      'reopen': 'üîì –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç',
      'update': 'üìù –û–±–Ω–æ–≤–ª–µ–Ω',
      'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω',
      'unapproved': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω',
      'approval': 'üëç –ü–æ–ª—É—á–∏–ª –æ–¥–æ–±—Ä–µ–Ω–∏–µ',
      'unapproval': 'üëé –û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–æ–∑–≤–∞–Ω–æ',
      'merge': 'üîó –°–ª–∏—Ç',
      'ready': '‚ú® –ì–æ—Ç–æ–≤ –∫ —Ä–µ–≤—å—é'
    };

    return actionMap[action] || `üîÑ ${action}`;
  }

  formatBranches(sourceBranch, targetBranch) {
    return `\`${sourceBranch}\` ‚Üí \`${targetBranch}\``;
  }

  formatMentionText(text) {
    // –ó–∞–º–µ–Ω—è–µ–º @mentions –Ω–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ Slack
    return text.replace(/@(\w+)/g, '*@$1*');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async sendTestNotification(slackUserId) {
    try {
      await this.slackApp.client.chat.postMessage({
        token: process.env.SLACK_BOT_TOKEN,
        channel: `@${slackUserId}`,
        text: 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        blocks: [
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: 'üß™ *–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã GitLab-Slack –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.'
            }
          },
          {
            type: 'section',
            fields: [
              {
                type: 'mrkdwn',
                text: '*–°—Ç–∞—Ç—É—Å:*\n–°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ'
              },
              {
                type: 'mrkdwn',
                text: '*–í—Ä–µ–º—è:*\n' + new Date().toLocaleString('ru-RU')
              }
            ]
          }
        ]
      });

      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${slackUserId}`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  async sendErrorNotification(slackUserId, error, context = '') {
    try {
      await this.slackApp.client.chat.postMessage({
        token: process.env.SLACK_BOT_TOKEN,
        channel: `@${slackUserId}`,
        text: '‚ùå –û—à–∏–±–∫–∞ –≤ GitLab –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
        blocks: [
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: `‚ùå *–û—à–∏–±–∫–∞ –≤ GitLab –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏*\n\n${context}`
            }
          },
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: `*–û—à–∏–±–∫–∞:*\n\`${error.message || error}\``
            }
          },
          {
            type: 'context',
            elements: [
              {
                type: 'mrkdwn',
                text: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å GitLab –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π `/gitlab-connect`'
              }
            ]
          }
        ]
      });
    } catch (sendError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendBulkNotifications(notifications) {
    const results = [];

    for (const notification of notifications) {
      try {
        if (notification.type === 'merge_request') {
          await this.sendMergeRequestNotification(
            notification.user,
            notification.mergeRequest,
            notification.project,
            notification.action,
            notification.reason,
            notification.author
          );
        } else if (notification.type === 'mention') {
          await this.sendMentionNotification(
            notification.user,
            notification.mergeRequest,
            notification.project,
            notification.note,
            notification.author
          );
        }

        results.push({ success: true, userId: notification.user.slack_user_id });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${notification.user.slack_user_id}:`, error);
        results.push({ 
          success: false, 
          userId: notification.user.slack_user_id, 
          error: error.message 
        });
      }
    }

    return results;
  }
}

module.exports = NotificationService;
